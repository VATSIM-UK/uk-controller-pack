name: Test Changes-Only ZIP (Latest vs Previous Release)

on:
  workflow_dispatch:

jobs:
  test-changes-zip:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo at latest release tag
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # we need full history to support tags

    - name: Get latest and previous release tags
      id: tags
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        repo="${{ github.repository }}"
        releases=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/$repo/releases?per_page=10")

        tags=($(echo "$releases" | jq -r '.[].tag_name'))
        if [ "${#tags[@]}" -lt 2 ]; then
          echo "Not enough releases found."
          exit 1
        fi

        echo "latest_tag=${tags[0]}" >> $GITHUB_OUTPUT
        echo "previous_tag=${tags[1]}" >> $GITHUB_OUTPUT

    - name: Compare and create changes-only ZIP
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        repo="${{ github.repository }}"
        from_tag="${{ steps.tags.outputs.previous_tag }}"
        to_tag="${{ steps.tags.outputs.latest_tag }}"

        echo "Comparing: $from_tag -> $to_tag"
        mkdir -p changes_only

        # Fetch changed files and safely store in array
        mapfile -t file_list < <(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/$repo/compare/$from_tag...$to_tag" \
          | jq -r '.files[] | select(.status != "removed") | .filename')

        echo "üìù Changed files:"
        printf '%s\n' "${file_list[@]}"

        # Always try to include the README.pdf
        cp _docs/README.pdf changes_only/README.pdf 2>/dev/null || echo "‚ö† README.pdf not found"

        for file in "${file_list[@]}"; do
          echo "::group::Checking $file"
          if [[ "$file" == UK/* || "$file" == "_docs/README.pdf" ]]; then
            if [ -f "$file" ]; then
              echo "‚úî Including: $file"
              mkdir -p "changes_only/$(dirname "$file")"
              cp "$file" "changes_only/$file"
            else
              echo "‚ö† Listed but missing in checkout: $file"
            fi
          else
            echo "‚è≠ Skipped (not matched by filter): $file"
          fi
          echo "::endgroup::"
        done

        echo "üì¶ Final contents:"
        find changes_only -type f

        if [ -z "$(find changes_only -type f)" ]; then
          echo "‚ö† No valid files to zip."
          exit 0
        fi

        # Zip only the contents, not the folder
        cd changes_only
        zip -r ../changes_only_test.zip .
        cd ..

    - name: Upload ZIP Artifact
      uses: actions/upload-artifact@v4
      with:
        name: changes-only-zip
        path: changes_only_test.zip
