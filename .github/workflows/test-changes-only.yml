name: Test Changes-Only ZIP (Release vs Previous Release)

on:
  workflow_dispatch:

jobs:
  test-changes-zip:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository with full history
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get latest and previous release tags
      id: tags
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        repo="${{ github.repository }}"
        releases=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/$repo/releases?per_page=10")
        tags=($(echo "$releases" | jq -r '.[].tag_name'))
        if [ "${#tags[@]}" -lt 2 ]; then
          echo "‚ùå Not enough releases found."
          exit 1
        fi
        echo "latest_tag=${tags[0]}" >> $GITHUB_OUTPUT
        echo "previous_tag=${tags[1]}" >> $GITHUB_OUTPUT

    - name: Compare releases and gather changed files
      run: |
        from_tag="${{ steps.tags.outputs.previous_tag }}"
        to_tag="${{ steps.tags.outputs.latest_tag }}"
        echo "üì¶ Comparing $from_tag ‚Üí $to_tag"
        mkdir -p changes_only

        declare -a prf_included
        declare -a prf_skipped

        mapfile -t file_list < <(git diff --name-only "$from_tag" "$to_tag")

        echo "üìù Changed files:"
        printf '%s\n' "${file_list[@]}"

        cp _docs/README.pdf changes_only/README.pdf 2>/dev/null || echo "‚ö† README.pdf not found"

        for file in "${file_list[@]}"; do
          echo "::group::Checking $file"
          if [[ "$file" == UK/* && "$file" != "_docs/README.pdf" ]]; then
            if [ -f "$file" ]; then
              if [[ "$file" == *.prf ]]; then
                diff_lines=$(git diff "$from_tag" "$to_tag" -- "$file" \
                  | grep -vE '^[-+]{3} ' \
                  | grep -E '^[-+]' \
                  | grep -vP '^[+-]Settings\tsector\t')

                if [ -z "$diff_lines" ]; then
                  echo "‚è≠ Skipped: $file (only Settings	sector	line changed)"
                  prf_skipped+=("$file")
                  echo "::endgroup::"
                  continue
                else
                  prf_included+=("$file")
                fi
              fi
              if [[ "$file" != *.prf ]]; then
                echo "‚úî Including: $file"
              fi
              mkdir -p "changes_only/$(dirname "$file")"
              cp "$file" "changes_only/$file"
              [[ "$file" != *.prf ]] || echo "‚úî Included .prf: $file"
            else
              echo "‚ö† Listed but not found: $file"
            fi
          else
            echo "‚è≠ Skipped: $file"
          fi
          echo "::endgroup::"
        done

        echo "üì¶ Final contents:"
        find changes_only -type f

        echo ""
        echo "‚úÖ Included .prf files:"
        for f in "${prf_included[@]}"; do echo "- $f"; done

        echo ""
        echo "üö´ Skipped .prf files (only Settings	sector	 changed):"
        for f in "${prf_skipped[@]}"; do echo "- $f"; done

        if [ -z "$(find changes_only -type f)" ]; then
          echo "‚ö† No files to include."
          exit 0
        fi

    - name: Upload raw changed files as ZIP
      uses: actions/upload-artifact@v4
      with:
        name: changes_only
        path: changes_only/*
