name: Create ZIPs on Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      release_tag:
        description: "The release tag (e.g., 2025_04)"
        required: true
        default: ""

jobs:
  create-full-zip:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v2

      - name: 🏷️ Get Release Tag
        id: get_release_tag
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "::set-output name=tag::${{ github.event.inputs.release_tag }}"
          else
            echo "::set-output name=tag::${{ github.event.release.tag_name }}"
          fi

      - name: 📦 Create Full Controller Pack ZIP
        run: |
          zip -r "uk_controller_pack_${{ steps.get_release_tag.outputs.tag }}.zip" UK/ -x "*.py"

      - name: 🚀 Upload Full ZIP to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            uk_controller_pack_${{ steps.get_release_tag.outputs.tag }}.zip

  create-changes-only-zip:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository with Full History
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🏷️ Determine Latest and Previous Release Tags
        id: tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          repo="${{ github.repository }}"
          releases=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \ 
            "https://api.github.com/repos/$repo/releases?per_page=10")
          tags=($(echo "$releases" | jq -r '.[].tag_name'))
          if [ "${#tags[@]}" -lt 2 ]; then
            echo "❌ Not enough releases found."
            exit 1
          fi
          echo "latest_tag=${tags[0]}" >> $GITHUB_OUTPUT
          echo "previous_tag=${tags[1]}" >> $GITHUB_OUTPUT

      - name: 🧠 Analyze Changes Between Releases
        run: |
          from_tag="${{ steps.tags.outputs.previous_tag }}"
          to_tag="${{ steps.tags.outputs.latest_tag }}"
          echo "📦 Comparing releases: $from_tag → $to_tag"
          mkdir -p changes_only

          declare -a prf_included
          declare -a prf_skipped

          mapfile -t file_list < <(git diff --name-only "$from_tag" "$to_tag")

          echo "📝 Changed files:"
          printf '%s\n' "${file_list[@]}"

          cp _docs/README.pdf changes_only/README.pdf 2>/dev/null || echo "⚠ README.pdf not found"

          for file in "${file_list[@]}"; do
            echo "::group::Checking $file"
            if [[ "$file" == UK/* && "$file" != "_docs/README.pdf" ]]; then
              if [ -f "$file" ]; then
                if [[ "$file" == *.prf ]]; then
                  diff_lines=$(git diff "$from_tag" "$to_tag" -- "$file" \
                    | grep -vE '^[-+]{3} ' \
                    | grep -E '^[-+]' \
                    | grep -vP '^[+-]Settings\tsector\t')
                  if [ -z "$diff_lines" ]; then
                    echo "⏭ Skipped: $file (only Settings\tsector\t line changed)"
                    prf_skipped+=("$file")
                    echo "::endgroup::"
                    continue
                  else
                    prf_included+=("$file")
                  fi
                fi
                if [[ "$file" != *.prf ]]; then
                  echo "✔ Including: $file"
                fi
                mkdir -p "changes_only/$(dirname "$file")"
                cp "$file" "changes_only/$file"
              else
                echo "⚠ Listed but not found: $file"
              fi
            else
              echo "⏭ Skipped: $file"
            fi
            echo "::endgroup::"
          done

          echo "\n✅ Included .prf files:"
          for f in "${prf_included[@]}"; do echo "- $f"; done

          echo "\n🚫 Skipped .prf files (only Settings\tsector\t changed):"
          for f in "${prf_skipped[@]}"; do echo "- $f"; done

          echo "\n📦 Final contents:"
          find changes_only -type f

          if [ -z "$(find changes_only -type f)" ]; then
            echo "⚠ No files to include."
            exit 0
          fi

      - name: 📦 Package Changes-only ZIP with Tag Name
        run: |
          tag="${{ steps.tags.outputs.latest_tag }}"
          cd changes_only
          zip -r "../changes_only_${tag}.zip" .
          cd ..

      - name: 📤 Upload Changes-only ZIP Artifact
        uses: actions/upload-artifact@v4
        with:
          name: changes_only_${{ steps.tags.outputs.latest_tag }}
          path: changes_only_${{ steps.tags.outputs.latest_tag }}.zip

      - name: 🚀 Upload Changes-only ZIP to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: changes_only_${{ steps.tags.outputs.latest_tag }}.zip
